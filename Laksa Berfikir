<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WhatsApp-like Dashboard</title>
  <!-- Libraries -->
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-storage-compat.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1"></script>
  <link href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@300;400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary-color: #008069;
      --secondary-color: #f0f2f5;
      --sidebar-bg: #f0f2f5;
      --chat-bg: #e5ddd5;
      --sent-bubble: #d9fdd3;
      --received-bubble: #ffffff;
      --text-dark: #111b21;
      --text-light: #fff;
      --online-dot: #00a884;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
      background: #e5ddd5;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    .app-container {
      width: 100%;
      max-width: 1200px;
      height: 90vh;
      background: white;
      border-radius: 8px;
      box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
      display: flex;
      overflow: hidden;
    }
    
    /* Sidebar */
    .sidebar {
      width: 30%;
      background: var(--sidebar-bg);
      border-right: 1px solid #ddd;
      display: flex;
      flex-direction: column;
    }
    
    .sidebar-header {
      background: var(--primary-color);
      color: white;
      padding: 12px 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .profile-pic {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: #ccc;
      overflow: hidden;
    }
    
    .profile-pic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .search-bar {
      padding: 8px 16px;
      background: white;
      border-bottom: 1px solid #eee;
    }
    
    .search-input {
      width: 100%;
      padding: 8px 12px;
      border-radius: 18px;
      border: none;
      background: #f0f2f5;
      outline: none;
    }
    
    .chat-list {
      flex: 1;
      overflow-y: auto;
    }
    
    .chat-item {
      display: flex;
      padding: 12px 16px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .chat-item:hover {
      background: #f5f5f5;
    }
    
    .chat-item.active {
      background: #e5e5e5;
    }
    
    .chat-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      margin-right: 12px;
      overflow: hidden;
    }
    
    .chat-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .chat-info {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .chat-name {
      font-weight: 600;
      margin-bottom: 4px;
      display: flex;
      justify-content: space-between;
    }
    
    .chat-last-message {
      font-size: 13px;
      color: #667781;
      display: flex;
      justify-content: space-between;
    }
    
    .chat-time {
      font-size: 11px;
      color: #667781;
    }
    
    .unread-count {
      background: var(--primary-color);
      color: white;
      font-size: 11px;
      padding: 2px 6px;
      border-radius: 50%;
      margin-left: 6px;
    }
    
    /* Chat Area */
    .chat-area {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .chat-header {
      background: var(--secondary-color);
      padding: 12px 16px;
      display: flex;
      align-items: center;
      border-bottom: 1px solid #ddd;
    }
    
    .chat-title {
      margin-left: 12px;
      flex: 1;
    }
    
    .chat-title h3 {
      font-weight: 600;
    }
    
    .chat-status {
      font-size: 13px;
      color: #667781;
      margin-top: 2px;
      display: flex;
      align-items: center;
    }
    
    .online-dot {
      width: 8px;
      height: 8px;
      background: var(--online-dot);
      border-radius: 50%;
      margin-right: 6px;
    }
    
    .chat-actions {
      display: flex;
      gap: 20px;
    }
    
    .chat-action-btn {
      color: #54656f;
      font-size: 18px;
      cursor: pointer;
    }
    
    .messages-container {
      flex: 1;
      padding: 16px;
      overflow-y: auto;
      background: var(--chat-bg);
      background-image: url("https://web.whatsapp.com/img/bg-chat-tile-light_a4be512e.png");
      background-blend-mode: overlay;
    }
    
    .message {
      max-width: 60%;
      margin-bottom: 16px;
      position: relative;
    }
    
    .message-content {
      padding: 8px 12px;
      border-radius: 8px;
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
      word-wrap: break-word;
    }
    
    .sent {
      margin-left: auto;
    }
    
    .sent .message-content {
      background: var(--sent-bubble);
      border-top-right-radius: 0;
    }
    
    .received {
      margin-right: auto;
    }
    
    .received .message-content {
      background: var(--received-bubble);
      border-top-left-radius: 0;
    }
    
    .group-message .sender-name {
      font-weight: 600;
      font-size: 12px;
      color: #667781;
      margin-bottom: 4px;
    }
    
    .message-time {
      font-size: 11px;
      color: #667781;
      margin-top: 4px;
      text-align: right;
    }
    
    .message-status {
      margin-left: 4px;
    }
    
    .sent .message-status {
      color: #4fc3f7;
    }
    
    .input-area {
      background: var(--secondary-color);
      padding: 12px 16px;
      display: flex;
      align-items: center;
      border-top: 1px solid #ddd;
    }
    
    .input-container {
      flex: 1;
      background: white;
      border-radius: 8px;
      display: flex;
      align-items: center;
      padding: 8px 12px;
      margin: 0 8px;
    }
    
    .message-input {
      flex: 1;
      border: none;
      outline: none;
      padding: 8px 12px;
      font-size: 14px;
      background: transparent;
    }
    
    .input-icon {
      color: #54656f;
      font-size: 20px;
      cursor: pointer;
      margin: 0 5px;
    }
    
    .send-button {
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    
    .emoji-picker {
      position: absolute;
      bottom: 70px;
      right: 20px;
      z-index: 100;
    }
    
    /* Group Info */
    .group-info {
      display: flex;
      flex-wrap: wrap;
      padding: 8px;
      margin-bottom: 16px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
    }
    
    .group-member {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 8px;
      width: 60px;
    }
    
    .group-member-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      overflow: hidden;
      margin-bottom: 4px;
    }
    
    .group-member-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .group-member-name {
      font-size: 12px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
    const { useState, useEffect, useRef } = React;

    // ======================== Firebase Config ========================
    const firebaseConfig = {
      apiKey: "AIzaSyDUxwEXAMPLE-KEY-123",
      authDomain: "your-project.firebaseapp.com",
      projectId: "your-project-id",
      storageBucket: "your-bucket.appspot.com",
      messagingSenderId: "1234567890",
      appId: "1:1234567890:web:abc123def456"
    };

    const app = firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore(app);
    const storage = firebase.storage(app);

    // ======================== Socket.io Client ========================
    const socket = io('https://your-socketio-server.com');

    // ======================== React App ========================
    function App() {
      const [currentUser, setCurrentUser] = useState({
        id: 'user_' + Math.floor(Math.random() * 1000),
        name: 'User' + Math.floor(Math.random() * 1000),
        avatar: 'https://i.pravatar.cc/150?img=' + Math.floor(Math.random() * 70)
      });
      
      const [chats, setChats] = useState([
        {
          id: 'chat_1',
          name: 'John Doe',
          avatar: 'https://i.pravatar.cc/150?img=1',
          lastMessage: 'Hey, how are you?',
          time: '10:30 AM',
          unread: 2,
          type: 'personal',
          online: true
        },
        {
          id: 'chat_2',
          name: 'Family Group',
          avatar: 'https://i.pravatar.cc/150?img=5',
          lastMessage: 'Mom: Dinner at 8pm',
          time: 'Yesterday',
          unread: 0,
          type: 'group',
          members: [
            { id: 'user_1', name: 'Mom', avatar: 'https://i.pravatar.cc/150?img=10' },
            { id: 'user_2', name: 'Dad', avatar: 'https://i.pravatar.cc/150?img=11' },
            { id: 'user_3', name: 'Sister', avatar: 'https://i.pravatar.cc/150?img=12' }
          ]
        },
        {
          id: 'chat_3',
          name: 'Work Team',
          avatar: 'https://i.pravatar.cc/150?img=8',
          lastMessage: 'Meeting at 3pm',
          time: 'Monday',
          unread: 5,
          type: 'group',
          members: [
            { id: 'user_4', name: 'Boss', avatar: 'https://i.pravatar.cc/150?img=20' },
            { id: 'user_5', name: 'Colleague 1', avatar: 'https://i.pravatar.cc/150?img=21' },
            { id: 'user_6', name: 'Colleague 2', avatar: 'https://i.pravatar.cc/150?img=22' }
          ]
        }
      ]);
      
      const [activeChat, setActiveChat] = useState(null);
      const [messages, setMessages] = useState([]);
      const [message, setMessage] = useState('');
      const [showEmojiPicker, setShowEmojiPicker] = useState(false);
      const messagesEndRef = useRef(null);

      // Load messages when active chat changes
      useEffect(() => {
        if (!activeChat) return;
        
        // In a real app, you would fetch messages from Firebase
        const demoMessages = [
          {
            id: 'msg_1',
            text: 'Hey there!',
            sender: {
              id: activeChat.type === 'personal' ? activeChat.id : 'user_1',
              name: activeChat.type === 'personal' ? activeChat.name : 'Mom',
              avatar: activeChat.type === 'personal' ? activeChat.avatar : 'https://i.pravatar.cc/150?img=10'
            },
            time: '10:30 AM',
            status: 'read'
          },
          {
            id: 'msg_2',
            text: 'How are you doing?',
            sender: {
              id: activeChat.type === 'personal' ? activeChat.id : 'user_1',
              name: activeChat.type === 'personal' ? activeChat.name : 'Mom',
              avatar: activeChat.type === 'personal' ? activeChat.avatar : 'https://i.pravatar.cc/150?img=10'
            },
            time: '10:31 AM',
            status: 'read'
          },
          {
            id: 'msg_3',
            text: "I'm good, thanks! How about you?",
            sender: {
              id: currentUser.id,
              name: currentUser.name,
              avatar: currentUser.avatar
            },
            time: '10:32 AM',
            status: 'delivered'
          }
        ];
        
        setMessages(demoMessages);
      }, [activeChat]);

      // Auto-scroll to bottom
      useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, [messages]);

      // Add emoji to message
      const addEmoji = (e) => {
        const emoji = e.detail.unicode;
        setMessage(prev => prev + emoji);
      };

      // Send message
      const sendMessage = (e) => {
        e.preventDefault();
        if (!message.trim()) return;

        const newMessage = {
          id: 'msg_' + Date.now(),
          text: message,
          sender: {
            id: currentUser.id,
            name: currentUser.name,
            avatar: currentUser.avatar
          },
          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          status: 'sent'
        };

        setMessages(prev => [...prev, newMessage]);
        setMessage('');
        setShowEmojiPicker(false);
        
        // In a real app, you would save to Firebase and send via Socket.io
        setTimeout(() => {
          if (activeChat.type === 'personal') {
            const replyMessage = {
              id: 'msg_' + Date.now(),
              text: 'Thanks for your message!',
              sender: {
                id: activeChat.id,
                name: activeChat.name,
                avatar: activeChat.avatar
              },
              time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              status: 'delivered'
            };
            setMessages(prev => [...prev, replyMessage]);
          }
        }, 1000);
      };

      return (
        <div className="app-container">
          {/* Sidebar */}
          <div className="sidebar">
            <div className="sidebar-header">
              <div className="profile-pic">
                <img src={currentUser.avatar} alt="Profile" />
              </div>
              <div>
                <i className="fas fa-comment-dots" style={{ marginRight: '20px', cursor: 'pointer' }}></i>
                <i className="fas fa-ellipsis-vertical" style={{ cursor: 'pointer' }}></i>
              </div>
            </div>
            
            <div className="search-bar">
              <input 
                type="text" 
                className="search-input" 
                placeholder="Search or start new chat"
              />
            </div>
            
            <div className="chat-list">
              {chats.map(chat => (
                <div 
                  key={chat.id}
                  className={`chat-item ${activeChat?.id === chat.id ? 'active' : ''}`}
                  onClick={() => setActiveChat(chat)}
                >
                  <div className="chat-avatar">
                    <img src={chat.avatar} alt={chat.name} />
                  </div>
                  <div className="chat-info">
                    <div className="chat-name">
                      {chat.name}
                      {chat.unread > 0 && <span className="unread-count">{chat.unread}</span>}
                    </div>
                    <div className="chat-last-message">
                      {chat.lastMessage}
                      <span className="chat-time">{chat.time}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Chat Area */}
          <div className="chat-area">
            {activeChat ? (
              <>
                <div className="chat-header">
                  <div className="profile-pic">
                    <img src={activeChat.avatar} alt={activeChat.name} />
                  </div>
                  <div className="chat-title">
                    <h3>{activeChat.name}</h3>
                    {activeChat.type === 'personal' ? (
                      <div className="chat-status">
                        <span className="online-dot"></span>
                        {activeChat.online ? 'online' : 'last seen today at 12:45 PM'}
                      </div>
                    ) : (
                      <div className="chat-status">
                        {activeChat.members.length} members
                      </div>
                    )}
                  </div>
                  <div className="chat-actions">
                    <i className="fas fa-search chat-action-btn"></i>
                    <i className="fas fa-ellipsis-vertical chat-action-btn"></i>
                  </div>
                </div>
                
                <div className="messages-container">
                  {activeChat.type === 'group' && (
                    <div className="group-info">
                      {activeChat.members.map(member => (
                        <div key={member.id} className="group-member">
                          <div className="group-member-avatar">
                            <img src={member.avatar} alt={member.name} />
                          </div>
                          <div className="group-member-name">
                            {member.name}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                  
                  {messages.map(msg => (
                    <div 
                      key={msg.id}
                      className={`message ${msg.sender.id === currentUser.id ? 'sent' : 'received'}`}
                    >
                      <div className="message-content">
                        {msg.sender.id !== currentUser.id && activeChat.type === 'group' && (
                          <div className="sender-name">{msg.sender.name}</div>
                        )}
                        {msg.text}
                        <div className="message-time">
                          {msg.time}
                          {msg.sender.id === currentUser.id && (
                            <span className="message-status">
                              {msg.status === 'sent' && <i className="fas fa-check"></i>}
                              {msg.status === 'delivered' && <i className="fas fa-check-double"></i>}
                              {msg.status === 'read' && <i className="fas fa-check-double" style={{ color: '#4fc3f7' }}></i>}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>
                
                <form onSubmit={sendMessage} className="input-area">
                  <i className="far fa-smile input-icon" onClick={() => setShowEmojiPicker(!showEmojiPicker)}></i>
                  <div className="input-container">
                    <input
                      type="text"
                      className="message-input"
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      placeholder="Type a message"
                    />
                    <i className="fas fa-paperclip input-icon"></i>
                  </div>
                  <button type="submit" className="send-button">
                    <i className="fas fa-paper-plane"></i>
                  </button>
                </form>
                
                {showEmojiPicker && (
                  <emoji-picker 
                    class="emoji-picker"
                    onemoji-click={addEmoji}
                  ></emoji-picker>
                )}
              </>
            ) : (
              <div style={{
                flex: 1,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#f0f2f5',
                color: '#54656f'
              }}>
                <div style={{
                  width: '300px',
                  textAlign: 'center',
                  padding: '20px'
                }}>
                  <i className="fas fa-comments" style={{ fontSize: '60px', marginBottom: '20px' }}></i>
                  <h2 style={{ marginBottom: '10px' }}>WhatsApp Web</h2>
                  <p style={{ marginBottom: '20px' }}>Select a chat to start messaging</p>
                  <p style={{ fontSize: '12px' }}>End-to-end encrypted</p>
                </div>
              </div>
            )}
          </div>
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>
